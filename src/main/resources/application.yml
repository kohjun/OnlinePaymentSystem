spring:
  application:
    name: payment-service

  # 데이터베이스 설정 - H2로 변경 (테스트 간편화)
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:
    driver-class-name: org.h2.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5

  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: create-drop  # 테스트용
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
    open-in-view: false
    defer-datasource-initialization: true

  # SQL 초기화 설정 (data.sql 실행용)
  sql:
    init:
      mode: always  # data.sql을 항상 실행
      encoding: UTF-8
      separator: ;
      continue-on-error: false  # 오류 시 중단

  # Redis 설정 - 단일 모드로 변경
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 5000
      # 클러스터 설정 제거하고 단일 모드 사용
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # Kafka 설정
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
    consumer:
      group-id: payment-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.example.payment.event,com.example.payment.dto
      enable-auto-commit: false

# 서버 설정
server:
  port: 8080

# 로깅 설정
logging:
  level:
    root: INFO
    com.example.payment: DEBUG
    org.springframework.kafka: WARN
    org.springframework.boot.autoconfigure.sql.init: DEBUG  # SQL 초기화 로그

# 결제 서비스 커스텀 설정
payment:
  processing:
    retry-count: 3
    timeout-seconds: 60
  topics:
    payment-requests: payment-requests
    payment-events: payment-events